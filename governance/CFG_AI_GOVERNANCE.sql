--------------------------------------------------------------------------------
-- File: CFG_AI_GOVERNANCE.sql
-- Project: Oracle-ebsR12-Governed-AI
-- Purpose: Governance schema and policy framework for AI / RAG integration
-- Author : Alaaeldin Abdelmonem
-- Version: 1.1 (2025-10-27)
-- Compatible: Oracle Database 23ai / 32ai
--------------------------------------------------------------------------------
-- SECTION 1. LOOKUP TABLES
--------------------------------------------------------------------------------

CREATE TABLE LKP_CLASSIFICATION_LEVEL (
    CLASSIFICATION_LEVEL  VARCHAR2(20)   PRIMARY KEY,
    CLASSIFICATION_NAME   VARCHAR2(100),
    DESCRIPTION           VARCHAR2(400)
);

INSERT INTO LKP_CLASSIFICATION_LEVEL VALUES ('PUBLIC',      'Public',       'Freely shareable information');
INSERT INTO LKP_CLASSIFICATION_LEVEL VALUES ('INTERNAL',    'Internal',     'Internal operational data');
INSERT INTO LKP_CLASSIFICATION_LEVEL VALUES ('CONFIDENTIAL','Confidential', 'Employee or financial data');
INSERT INTO LKP_CLASSIFICATION_LEVEL VALUES ('RESTRICTED',  'Restricted',   'Highly sensitive or regulated data');


CREATE TABLE LKP_SENSITIVITY_LABEL (
    LABEL_CODE      VARCHAR2(20) PRIMARY KEY,
    LABEL_NAME      VARCHAR2(100),
    DESCRIPTION     VARCHAR2(400)
);

INSERT INTO LKP_SENSITIVITY_LABEL VALUES ('GEN','General','No special sensitivity');
INSERT INTO LKP_SENSITIVITY_LABEL VALUES ('PII','Personal','Personally identifiable data');
INSERT INTO LKP_SENSITIVITY_LABEL VALUES ('FIN','Financial','Financial or salary data');
INSERT INTO LKP_SENSITIVITY_LABEL VALUES ('SEC','Security','Credentials or tokens');

--------------------------------------------------------------------------------
-- SECTION 2. POLICY DEFINITION
--------------------------------------------------------------------------------

CREATE TABLE CFG_AI_POLICY (
    POLICY_ID              NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    POLICY_NAME            VARCHAR2(100) NOT NULL,
    MODEL_NAME             VARCHAR2(100) NOT NULL,
    MAX_CONTEXT_TOKENS     NUMBER DEFAULT 8192,
    ALLOWED_CLASSIFICATION VARCHAR2(20) REFERENCES LKP_CLASSIFICATION_LEVEL,
    ALLOWED_LABEL          VARCHAR2(20) REFERENCES LKP_SENSITIVITY_LABEL,
    ACTION_ON_VIOLATION    VARCHAR2(10) DEFAULT 'REDACT',  -- BLOCK | WARN | REDACT
    ENABLED_FLAG           CHAR(1) DEFAULT 'Y',
    CREATED_BY             VARCHAR2(50),
    CREATED_AT             DATE DEFAULT SYSDATE
);

INSERT INTO CFG_AI_POLICY
(POLICY_NAME, MODEL_NAME, ALLOWED_CLASSIFICATION, ALLOWED_LABEL)
VALUES ('Default Redaction Policy', 'E5_MULTILINGUAL', 'CONFIDENTIAL', 'PII');

--------------------------------------------------------------------------------
-- SECTION 3. REDACTION RULES
--------------------------------------------------------------------------------

CREATE TABLE CFG_REDACTION_RULE (
    RULE_ID      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    RULE_NAME    VARCHAR2(100),
    PATTERN      VARCHAR2(400),
    REPLACEMENT  VARCHAR2(100) DEFAULT '[REDACTED]',
    DESCRIPTION  VARCHAR2(400),
    ENABLED_FLAG CHAR(1) DEFAULT 'Y'
);

INSERT INTO CFG_REDACTION_RULE (RULE_NAME, PATTERN, DESCRIPTION)
VALUES ('Email Mask',      '[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}', 'Mask email addresses');
INSERT INTO CFG_REDACTION_RULE (RULE_NAME, PATTERN, DESCRIPTION)
VALUES ('Phone Mask',      '\\+?[0-9]{10,15}', 'Mask phone numbers');
INSERT INTO CFG_REDACTION_RULE (RULE_NAME, PATTERN, DESCRIPTION)
VALUES ('National ID Mask','[0-9]{14}', 'Mask national IDs');

--------------------------------------------------------------------------------
-- SECTION 4. AUDIT TRAIL
--------------------------------------------------------------------------------

CREATE TABLE AI_USAGE_LOG (
    LOG_ID              NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    USERNAME            VARCHAR2(100),
    RESPONSIBILITY      VARCHAR2(100),
    MODULE_NAME         VARCHAR2(100),
    PROMPT_TEXT         CLOB,
    RETRIEVED_CONTEXT   CLOB,
    MODEL_NAME          VARCHAR2(100),
    RESPONSE_SUMMARY    CLOB,
    CLASSIFICATION_LEVEL VARCHAR2(20),
    SENSITIVITY_LABEL    VARCHAR2(20),
    EXECUTED_AT         TIMESTAMP DEFAULT SYSTIMESTAMP,
    POLICY_ID           NUMBER REFERENCES CFG_AI_POLICY,
    REDACTED_FLAG       CHAR(1) DEFAULT 'N'
);

CREATE INDEX AI_USAGE_LOG_IDX1 ON AI_USAGE_LOG (USERNAME, EXECUTED_AT);

--------------------------------------------------------------------------------
-- SECTION 5. SUPPORTING VIEW
--------------------------------------------------------------------------------

CREATE OR REPLACE VIEW AI_REALTIME_USAGE_V AS
SELECT
    USERNAME,
    MODULE_NAME,
    MODEL_NAME,
    EXECUTED_AT,
    CASE WHEN REDACTED_FLAG='Y' THEN 'REDACTED' ELSE 'NORMAL' END AS OUTPUT_TYPE,
    LENGTH(PROMPT_TEXT) AS PROMPT_LEN,
    LENGTH(RESPONSE_SUMMARY) AS RESPONSE_LEN
FROM AI_USAGE_LOG;

--------------------------------------------------------------------------------
-- SECTION 6. POLICY UTILITY PACKAGE
--------------------------------------------------------------------------------

CREATE OR REPLACE PACKAGE AI_POLICY_UTIL AS
  FUNCTION IS_ACCESS_ALLOWED (
      P_CLASSIFICATION IN VARCHAR2,
      P_LABEL          IN VARCHAR2,
      P_POLICY_ID      IN NUMBER
  ) RETURN BOOLEAN;

  FUNCTION APPLY_REDACTION (
      P_TEXT IN CLOB
  ) RETURN CLOB;
END AI_POLICY_UTIL;
/

CREATE OR REPLACE PACKAGE BODY AI_POLICY_UTIL AS

  FUNCTION IS_ACCESS_ALLOWED (
      P_CLASSIFICATION IN VARCHAR2,
      P_LABEL          IN VARCHAR2,
      P_POLICY_ID      IN NUMBER
  ) RETURN BOOLEAN IS
    V_ALLOWED VARCHAR2(1) := 'N';
  BEGIN
    SELECT CASE
             WHEN C.ALLOWED_CLASSIFICATION = P_CLASSIFICATION
              AND C.ALLOWED_LABEL = P_LABEL
              AND C.ENABLED_FLAG = 'Y'
             THEN 'Y' ELSE 'N'
           END
      INTO V_ALLOWED
      FROM CFG_AI_POLICY C
     WHERE C.POLICY_ID = P_POLICY_ID;

    RETURN (V_ALLOWED = 'Y');
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN FALSE;
  END IS_ACCESS_ALLOWED;

  FUNCTION APPLY_REDACTION (
      P_TEXT IN CLOB
  ) RETURN CLOB IS
    V_TEXT CLOB := P_TEXT;
  BEGIN
    FOR R IN (SELECT PATTERN, REPLACEMENT FROM CFG_REDACTION_RULE WHERE ENABLED_FLAG='Y') LOOP
      V_TEXT := REGEXP_REPLACE(V_TEXT, R.PATTERN, R.REPLACEMENT, 1, 0, 'i');
    END LOOP;
    RETURN V_TEXT;
  END APPLY_REDACTION;

END AI_POLICY_UTIL;
/

--------------------------------------------------------------------------------
-- SECTION 7. TRIGGERS
--------------------------------------------------------------------------------

CREATE OR REPLACE TRIGGER AI_AUDIT_DEFAULTS
BEFORE INSERT ON AI_USAGE_LOG
FOR EACH ROW
BEGIN
  IF :NEW.EXECUTED_AT IS NULL THEN
    :NEW.EXECUTED_AT := SYSTIMESTAMP;
  END IF;
END;
/
--------------------------------------------------------------------------------
-- END OF FILE
--------------------------------------------------------------------------------
